# Rime schema
# encoding: utf-8

schema:
  schema_id: rime_mint
  name: 薄荷拼音
  version: "1.11"
  author:
    - mintimate < @Mintimate|https://www.mintimate.cn >
  description: |
    Mintimate的薄荷拼音方案。
    除了参考官方明月拼音，还参考：
      * chenhe: https://chenhe.me
      * rime wiki: https://github.com/rime/home/wiki
      * rime ice: https://github.com/iDvel/rime-ice
      * Chewing - 新酷音
      * opencc - 開放中文轉換
  dependencies:
    - chaizi # 参考 https://github.com/MaxChang3/rime-chaizi
    - wubi98_mint # 98五笔库 https://github.com/yanhuacuo/98wubi-tables
    - stroke
    - melt_eng # 英文方案

key_binder:
  import_preset: default
  bindings:
    - {accept: "Control+Shift+E", toggle: emoji_suggestion, when: always}
    - {accept: "Control+Shift+1", toggle: transcription, when: has_menu}
    - {accept: bracketleft, send: Page_Up, when: paging}      # 使用`[`进行向上翻页（第一页时候无效）
    - {accept: bracketright, send: Page_Down, when: has_menu} # 使用`]`进行向下翻页
    - {accept: minus, send: Page_Up, when: paging}     # 使用`-`进行向上翻页（第一页时候无效）
    - {accept: equal, send: Page_Down, when: has_menu} # 使用`=`进行向下翻页

switches:
  - name: ascii_mode
    reset: 0
    states: [ 中文, 英文 ]
  - name: emoji_suggestion
    reset: 1
    states: [ "😣️","😁️"]
  - name: full_shape
    states: [ 半角, 全角 ]
  - name: transcription
    reset: 0
    states: [ 简体 , 繁体 ]
  - name: ascii_punct
    states: [ 。，, ．， ]

engine:
  processors:
    - ascii_composer # ※ 處理西文模式及中西文切換
    - recognizer # ※ 與 matcher 搭配，處理符合特定規則的輸入碼，如網址、反查等
    - key_binder # ※ 在特定條件下將按鍵綁定到其他按鍵，如重定義逗號、句號爲候選翻頁鍵
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor # 標識西文段落
    - matcher # 標識符合特定規則的段落，如網址、反查等
    - affix_segmentor@wubi98_mint
    - affix_segmentor@chaizi
    - affix_segmentor@stroke
    - abc_segmentor # 標識常規的文字段落
    - punct_segmentor # 標識句讀段落
    - fallback_segmentor # 標識其他未標識段落
  translators:
    - punct_translator  # ※ 轉換標點符號
    - script_translator
    - lua_translator@date_translator # 日期Lua
    - lua_translator@time_translator # 时间Lua
    - lua_translator@week_translator # 星期Lua
    - lua_translator@number_translator # 金额大小写
    - table_translator@melt_eng  # 英文输入（作为子翻译器，优先级需要比原生的低）
    # - echo_translator      # ※ 没有候选词，返回字符
    - reverse_lookup_translator@wubi98_mint
    - reverse_lookup_translator@chaizi
    - reverse_lookup_translator@stroke
    # - reverse_lookup_translator # 反查模块，多标签情况下去除
  filters:
    - simplifier
    - simplifier@emoji_suggestion
    - simplifier@transcription_cc
    - lua_filter@reduce_english_filter    # 降低部分英语单词在候选项的位置
    - uniquifier                          # 去重

# 简繁切换
transcription_cc:
  option_name: transcription
  opencc_config: s2t.json             # s2t.json | s2hk.json | s2tw.json | s2twp.json
  tips: none                          # 转换提示: all 都显示 | char 仅单字显示 | none 不显示。
  excluded_types: [ reverse_lookup ]  # 不转换反查（两分拼字）的内容

# Emoji模块
emoji_suggestion:
  opencc_config: emoji.json
  option_name: emoji_suggestion
  tips: all
  inherit_comment: false

# 降低之后： 输入 rug 得到 「1.如果 2.rug …… 」
reduce_english_filter:
  # 降低到第 idx 个位置
  idx: 2
  # 要降低的单词，匹配的是输入码，即全小写。
  words: [rug, bus, ship, laos, bail, bam, bans, bib, bos, chic, chit, dab, dag,
  dal, dit, dub, dug, fab, gam, ger, gus, hem, hep, hud, kat, lam, lax, lex, lug,
  lux, moc, mos, mot, mum, nad, nay, nib, nip, pak, pap, pax, rig, rum, sac, sal,
  sax, sec, shin, sis, ska, slang, sus, tad, taj, tac, tic, yep, yum, fax, cain,
  key, mob, buy, dam, wap, yes, but, put, lag, buf, lip, aid, aim, dig, dim, din,
  dip, pail, cad, chap, bend, lid, gem, tin, went]

translator:
  # 字典文件
  dictionary: custom_dict.all
  preedit_format:
    - xform/([nl])v/$1ü/
    - xform/([nl])ue/$1üe/
    - xform/([jqxy])v/$1u/
  initial_quality: 1.2

melt_eng:
  dictionary: custom_dict_en.all # 英文词典
  enable_sentence: false         # 关闭自动造句
  enable_completion: false       # 关闭自动提示
  initial_quality: 0.8

speller:
  # 拼写匹配
  algebra:
    - erase/^xx$/ # 首选保留
    # - derive/^([zcs])h/$1/ # zh, ch, sh => z, c, s
    # - derive/^([zcs])([^h])/$1h$2/ # z, c, s => zh, ch, sh
    # - derive/([aei])n$/$1ng/ # en => eng, in => ing
    # - derive/([aei])ng$/$1n/ # eng => en, ing => in
    # - derive/([iu])an$/$lan/ # ian => iang, uan => uang
    # - derive/([iu])ang$/$lan/ # iang => ian, uang => uan
    - derive/([aeiou])ng$/$1gn/        # dagn => dang
    - derive/([dtngkhrzcs])o(u|ng)$/$1o/  # zho => zhong|zhou
    - derive/ong$/on/                  # zhonguo => zhong guo
    - abbrev/^([a-z]).+$/$1/ #简拼（首字母）
    - abbrev/^([zcs]h).+$/$1/ #简拼（zh, ch, sh）
     ### 自动纠错
    # 有些规则对全拼简拼混输有副作用：如「x'ai 喜爱」被纠错为「xia 下」
    # zh、ch、sh
    - derive/([zcs])h(a|e|i|u|ai|ei|an|en|ou|uo|ua|un|ui|uan|uai|uang|ang|eng|ong)$/h$1$2/  # hzi → zhi
    - derive/([zcs])h([aeiu])$/$1$2h/  # zih → zhi
    # ai
    - derive/^([wghk])ai$/$1ia/  # wia → wai
    # ia
    - derive/([qjx])ia$/$1ai/  # qai → qia
    # ei
    - derive/([wtfghkz])ei$/$1ie/
    # ie
    - derive/([jqx])ie$/$1ei/
    # ao
    - derive/([rtypsdghklzcbnm])ao$/$1oa/
    # ou
    - derive/([ypfm])ou$/$1uo/
    # uo（无）
    # an
    - derive/([wrtypsdfghklzcbnm])an$/$1na/
    # en
    - derive/([wrpsdfghklzcbnm])en$/$1ne/
    # ang
    - derive/([wrtypsdfghklzcbnm])ang$/$1nag/
    - derive/([wrtypsdfghklzcbnm])ang$/$1agn/
    # eng
    - derive/([wrtpsdfghklzcbnm])eng$/$1neg/
    - derive/([wrtpsdfghklzcbnm])eng$/$1egn/
    # ing
    - derive/([qtypdjlxbnm])ing$/$1nig/
    - derive/([qtypdjlxbnm])ing$/$1ign/
    # ong
    - derive/([rtysdghklzcn])ong$/$1nog/
    - derive/([rtysdghklzcn])ong$/$1ogn/
    # iao
    - derive/([qtpdjlxbnm])iao$/$1ioa/
    - derive/([qtpdjlxbnm])iao$/$1oia/
    # ui
    - derive/([rtsghkzc])ui$/$1iu/
    # iu
    - derive/([qjlxnm])iu$/$1ui/
    # ian
    - derive/([qtpdjlxbnm])ian$/$1ain/
    # - derive/([qtpdjlxbnm])ian$/$1ina/ # 和「李娜、蒂娜、缉拿」等常用词有冲突
    # in
    - derive/([qypjlxbnm])in$/$1ni/
    # iang
    - derive/([qjlxn])iang$/$1aing/
    - derive/([qjlxn])iang$/$1inag/
    # ua
    - derive/([g|k|h|zh|sh])ua$/$1au/
    # uai
    - derive/([g|h|k|zh|ch|sh])uai$/$1aui/
    - derive/([g|h|k|zh|ch|sh])uai$/$1uia/
    # uan
    - derive/([qrtysdghjklzxcn])uan$/$1aun/
    # - derive/([qrtysdghjklzxcn])uan$/$1una/ # 和「去哪、露娜」等常用词有冲突
    # un
    - derive/([qrtysdghjklzxc])un$/$1nu/
    # ue
    - derive/([nlyjqx])ue$/$1eu/
    # uang
    - derive/([g|h|k|zh|ch|sh])uang$/$1aung/
    - derive/([g|h|k|zh|ch|sh])uang$/$1uagn/
    - derive/([g|h|k|zh|ch|sh])uang$/$1unag/
    - derive/([g|h|k|zh|ch|sh])uang$/$1augn/
    # iong
    - derive/([jqx])iong$/$1inog/
    - derive/([jqx])iong$/$1oing/
    - derive/([jqx])iong$/$1iogn/
    - derive/([jqx])iong$/$1oign/
    # 其他
    - derive/([rtsdghkzc])o(u|ng)$/$1o/ # do → dou|dong
    - derive/ong$/on/ # lon → long
    - derive/([tl])eng$/$1en/ # ten → teng
    - derive/([qwrtypsdfghjklzxcbnm])([aeio])ng$/$1ng/ # lng → lang、leng、ling、long

wubi98_mint:
  tag: wubi98_mint
  dictionary: custom_dict.wubi
  enable_user_dict: false
  enable_completion: true
  prefix: "uw"
  suffix: "'"
  tips: 〔五笔〕

stroke:
  tag: stroke
  dictionary: stroke
  enable_user_dict: false
  prefix: 'ui'
  suffix: "'"
  tips: 〔笔画〕
  preedit_format:
    - xlit/hspnz/一丨丿丶乙/

chaizi:
  tag: chaizi
  dictionary: chaizi
  enable_completion: true
  prefix: "uu"
  preedit_format:
    - xform/([nljqxy])v/$1ü/
  comment_format:
    - xform/([nljqxy])v/$1ü/
  tips: 〔拆字〕

reverse_lookup:
  tags: [wubi98_mint,stroke,chaizi]
  overwrite_comment: true
  dictionary: dicts/rime_ice.8105

punctuator:
  import_preset: symbols
  # 定义部分半角字符
  half_shape:
      "#": "#"
      "*": "*"
      '.' : ["。"]
      "`": "`"
      "~": "~"
      "@": "@"
      "=": "="
      "/": ["/", "÷",]
      '\': "、"
      "_" : "──"
      "'": {pair: ["「", "」"]}
      "[": ["【", "["]
      "]": ["】", "]"]
      "$": ["¥", "$", "€", "£", "¢", "¤"]
      "<": ["《", "〈", "«", "<"]
      ">": ["》", "〉", "»", ">"]

recognizer:
  import_preset: default
  patterns:
    punct: "^/([0-9]0?|[a-z]+)$"
    wubi98_mint: "uw[a-z]*'?$"
    stroke: "ui[a-z]*'?$"
    chaizi: "uu[a-z]*'?$"
    number: "^R[0-9]+[.]?[0-9]*"
